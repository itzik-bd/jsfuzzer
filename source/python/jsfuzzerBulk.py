#!/usr/bin/python

import sys
import os
import shutil
import re

outDir = ''
runLine = ''
paramsTemplate = ''

RHINO_FAIL_MESSAGE = "Encountered code generation error while compiling script: generated bytecode for method exceeds 64K limit."

runCounter = 0

def run():
	# Create temp output directory (if not exists)
	tmpDir = outDir + '\\' +str(runCounter) + '\\'
	if os.path.exists(tmpDir):
		return
	else:
		os.makedirs(tmpDir)
	
	# Set Run line
	params = paramsTemplate % (tmpDir)
	command = "%s %s > %sout.txt" % (runLine, params, tmpDir)

	# Run program
	os.system(command)
	
	# Are there at least two different outputs
	if (isDifferent(tmpDir)):
		# move directory
		shutil.copytree(tmpDir, outDir + '\\differents\\' +str(runCounter))
		print (str(runCounter) + " Got different answers")
	else:
		print (str(runCounter) + " Is the same in all engines")
	# Delete temp files
	shutil.copyfile(tmpDir + "code.js", outDir + "\\All code files\\" + str(runCounter) + ".js")
	shutil.rmtree(tmpDir)
	
def isDifferent(tmpDir):
	# find line with passed:
	for line in open(tmpDir + 'out.txt').readlines():
		# parse out the engines that passed
		if ("Passed:" in line):
			index = line.index("Passed:") + 8
			passLine = line[index:(len(line)-1)]
			passed = passLine.split(", ")
	
	# for each line that contains "equivalence class"
	for line in open(tmpDir + 'out.txt').readlines():
		counter = 0
		if ("equivalence class" in line):
			# if all passed engines are in the same class return 0
			for engine in passed:
				if (engine in line):
					counter += 1
			if counter == len(passed):
				return 0
				
	return 1
	
if (__name__ == "__main__"):
	if (len(sys.argv) < 4):
		print ("usage: %s <jsfuzzerJarFile> <enginesDirectory> <outDir> [runCounter]" % (sys.argv[0]))
		print ("example: %s jsfuzzer.jar engines /tmp/test/" % (sys.argv[0]))
	else:
		jarLocation = sys.argv[1]
		enginesDirectory = sys.argv[2]
		outDir = sys.argv[3]
		
		# compose execution template
		runLine = "java -jar %s" % (jarLocation)
		paramsTemplate = "--out %%scode.js --run %s --execFlow extensive" % (enginesDirectory)
	
		# Start counter at more than zero
		if (len(sys.argv) > 4):
			runCounter = int(sys.argv[4])
		
		# Create needed directories if needed
		if not os.path.exists(outDir):
			os.makedirs(outDir)
			
		if not os.path.exists(outDir + "\\All code files"):
			os.makedirs(outDir + "\\All code files")
		
		# Run the tester forever
		while(1):
			run()
			runCounter += 1