/*
 * This program was generated by jsfuzzer version 0.1
 * 
 * seed: 1437382708002
 * date: Mon Jul 20 15:48:52 IDT 2015
 */
var JSFuzzer = (function()
{
	// private
	var callDepth = -1;
	
	// public
	var api = {};
	
	/*	print function - platform independent */
	api.print = function(str)
	{
		typeof console !== 'undefined' ? console.log(str) : print(str);
	};
	
	/*	Function that print all vars and their value (JSON)
	 *	Recives a single array whose elements are pairs (as array) that contains string and value.
	 *	For example: [["v2",v2],["v7",v7]]
	 */
	api.debugVars = function (varsArray)
	{
		for (var i=0; i<varsArray.length; i++) {
			var vaule;
			try { value = JSON.stringify(varsArray[i][1]); }
			catch(e) { value = "[circular Object]"; }
			api.print(varsArray[i][0] + " = " + value);
		}
	};
	
	/*	call proxy function - every call to any generated function is pass through this proxy.
	 *	Moreover, it trace the program function calls depth
	 */
	api.call = function ()
	{
		callDepth++;
		var result;
		var f = arguments['0'];
		var f_name = arguments['1'];
		if (typeof f === 'function') {
			api.traceDebug(f_name);
			var params = [];
			for (key in arguments) if (key != '0' && key != '1') params.push(arguments[key]);
			result = f.apply(f, params);		
		}
		else api.traceDebug('call to non-func ' + f_name);
		callDepth--;
		return result;
	};
	
	api.traceDebug = function(str)
	{
		api.print(Array(callDepth+1).join("\t") + str);
	};
	
	return api;
})();

/*----------------------------------------------------------------------------*/
var v1;
JSFuzzer.call(function (v1, v2, v3)
	{/* block id: 22 */
		JSFuzzer.print("block 22");
		JSFuzzer.call(function (v2, v4)
			{/* block id: 30 */
				JSFuzzer.print("block 30");
				return;
				v4 /= NaN;
				v1 = v3;
				var loop_var1 = 0;
				do
				{/* block id: 50 */
					JSFuzzer.print("block 50");
					if ((!((loop_var1++) < 29)))
					{
						break;
					}
					JSFuzzer.call(function (v5, v3)
						{/* block id: 56 */
							JSFuzzer.print("block 56");
							var v6 = v3, v7 = v6;
							v2 = v5;
						}, "anonymous f67", this, v1);
					JSFuzzer.call(function (v8, v9)
						{/* block id: 74 */
							JSFuzzer.print("block 74");
							v3 *= v2;
						}, "anonymous f80", (v1 * this), v2);
				}
				while (NaN);
				v2 = true;
				v1 = undefined;
			}, "anonymous f90", v2, Infinity);
		var v10 = (v1 & v1);
	}, "anonymous f99", v1, v1, v1);
v1 = 66;
var v11 = NaN, v12 = JSFuzzer.call(function (v1, v13, v14, v15)
	{/* block id: 113 */
		JSFuzzer.print("block 113");
		var v16;
		v1 = v1;
		var v17 = undefined;
	}, "anonymous f126", v11, undefined, v12, "\f\u00061U\u000F\u0019w&;\u0018je;,S\u001D^&V7`\u0016\u0017");
if (5876)
{/* block id: 134 */
	JSFuzzer.print("block 134");
	v12 = (v12 / this);
	v11 = v1;
	JSFuzzer.call(function (v18, v19, v1)
		{/* block id: 144 */
			JSFuzzer.print("block 144");
			v18 = v1;
			v18 = v11;
		}, "anonymous f151", ((v11 && false) >>> 397), v1, this);
	var loop_var2 = 0;
	while (undefined)
	{/* block id: 170 */
		JSFuzzer.print("block 170");
		if ((!((loop_var2++) < 25)))
		{
			break;
		}
		v1 >>= v1;
	}
}
if (v1)
{/* block id: 178 */
	JSFuzzer.print("block 178");
	var v20, v21 = v11, v22;
	if (this)
	{/* block id: 190 */
		JSFuzzer.print("block 190");
		var v23 = v23;
		var v24, v25;
		var v26 = NaN;
		var v27;
		var v28 = v27;
		v25 *= v25;
		JSFuzzer.call(function (v22, v29, v30)
			{/* block id: 216 */
				JSFuzzer.print("block 216");
				var v31 = v30, v32;
				v26 = v12;
			}, "anonymous f227", ((false + v21) >>> v26), NaN, v23);
	}
	else
	{/* block id: 235 */
		JSFuzzer.print("block 235");
		var v33 = v22, v34, v35 = (undefined === v35), v36 = v21, v37, v38, v39;
		v22 |= v25;
		v35 = 4495;
		JSFuzzer.call(function (v40, v39, v41, v34, v27)
			{/* block id: 262 */
				JSFuzzer.print("block 262");
				v22 >>>= v12;
				JSFuzzer.call(function (v42)
					{/* block id: 269 */
						JSFuzzer.print("block 269");
						JSFuzzer.call(function (v43)
							{/* block id: 275 */
								JSFuzzer.print("block 275");
								v34 = v23;
							}, "anonymous f281", v24);
					}, "anonymous f285", v34);
			}, "anonymous f289", false, JSFuzzer.call(function (v26, v44, v45, v35, v46, v47)
			{/* block id: 296 */
				JSFuzzer.print("block 296");
				var v48, v49 = v12, v50;
				var v51, v52;
			}, "anonymous f313", v37, v21, "hcM", v28, v37, v37), v23, ((4 < "cQqB\u001Bb\u00193\u001B\u001A\u0014,Cl\t\u0005") !== v26), Infinity);
		v21 = false;
	}
}
else
{/* block id: 328 */
	JSFuzzer.print("block 328");
	v37 = JSFuzzer.call(function (v28, v53, v39)
		{/* block id: 334 */
			JSFuzzer.print("block 334");
			return v11;
		}, "anonymous f340", v38, v26, v22);
	for (var v54 in [v12, this])
	{/* block id: 349 */
		JSFuzzer.print("block 349");
		var v55, v56, v57 = v36;
	}
	if (JSFuzzer.call(function (v39, v58, v36, v59)
		{/* block id: 364 */
			JSFuzzer.print("block 364");
			return v36;
			var v60;
			JSFuzzer.call(function (v61, v62)
				{/* block id: 375 */
					JSFuzzer.print("block 375");
					JSFuzzer.call(function (v63)
						{/* block id: 381 */
							JSFuzzer.print("block 381");
							v22 = true;
						}, "anonymous f388", v36);
					JSFuzzer.call(function (v64, v27)
						{/* block id: 393 */
							JSFuzzer.print("block 393");
							v57 += v64;
						}, "anonymous f399", v28, v23);
				}, "anonymous f403", null, null);
			return v34;
			var v65, v66, v67 = v38;
			JSFuzzer.call(function (v54, v68, v69, v57, v70, v71, v72, v22, v58, v35, v73, v27)
				{/* block id: 423 */
					JSFuzzer.print("block 423");
					var v74, v75, v76, v77;
					JSFuzzer.call(function (v35, v58, v22)
						{/* block id: 437 */
							JSFuzzer.print("block 437");
							var v78 = false, v79, v80 = v78, v81 = Infinity;
						}, "anonymous f453", v34, " \u0016R<c>c9\\s\u00133", true);
				}, "anonymous f459", v25, (v54 ? v21 : NaN), (v60 * v27), false, NaN, v23, undefined, v24, v24, this, undefined, v12);
		}, "anonymous f470", v39, v12, (v33 > v20), v36))
	{/* block id: 475 */
		JSFuzzer.print("block 475");
		function f1(v82, v55, v83)
		{/* block id: 483 */
			JSFuzzer.print("block 483");
			v55 = "\u000E@nKS>3JE\u0006\u0007\u0010rk";
			v37 = null;
		}
	}
	else
	{/* block id: 493 */
		JSFuzzer.print("block 493");
		switch (v25)
		{
			case v36:
			case false:
			case false:
			{/* block id: 504 */
				JSFuzzer.print("block 504");
				JSFuzzer.call((((typeof f1) === "function") ? f1 : undefined), "f1", NaN, v35, 355);
				for (var v84 in [66346, v25, v39])
				{/* block id: 522 */
					JSFuzzer.print("block 522");
					JSFuzzer.call((((typeof f1) === "function") ? f1 : undefined), "f1", v37, v25, v21);
					v24 -= Infinity;
				}
			}
		}
		v35 = v21;
		JSFuzzer.call((((typeof f1) === "function") ? f1 : undefined), "f1", JSFuzzer.call(function (v55, v85, v86, v22, v26, v87)
			{/* block id: 545 */
				JSFuzzer.print("block 545");
				v25 *= v84;
				JSFuzzer.call((((typeof f1) === "function") ? f1 : undefined), "f1", v1, v55, ">\u001CS\u001B\u0015\u000B\u001Ehk\u0012k\u001A'C\u000B{?w,\u0018k:H8zy!r\u0018D");
			}, "anonymous f558", v20, undefined, 31, v27, v54, undefined), v28, "y<|c\u0013d@|\"AH\u001AnGI_\u001C");
	}
	v22 = (--v54);
	var v88 = v36, v89 = this, v90 = false, v91, v92 = v1, v93 = v54;
	var loop_var3 = 0;
	while (v11)
	{/* block id: 595 */
		JSFuzzer.print("block 595");
		if ((!((loop_var3++) < 25)))
		{
			break;
		}
		var v94, v95, v96, v97 = v91, v98 = v1, v99 = v84, v100 = (-v54), v101 = "&`LW", v102, v103;
	}
	JSFuzzer.call((((typeof f1) === "function") ? f1 : undefined), "f1", v96, v94, undefined);
}
var loop_var4 = 0;
do
{/* block id: 643 */
	JSFuzzer.print("block 643");
	if ((!((loop_var4++) < 30)))
	{
		break;
	}
	JSFuzzer.call((((typeof f1) === "function") ? f1 : undefined), "f1", undefined, v56, this);
}
while ("/[=X");
v91 = false;
v33 = (typeof v26);
var v104;
function f2(v103, v55, v105)
{/* block id: 665 */
	JSFuzzer.print("block 665");
	JSFuzzer.call((((typeof f1) === "function") ? f1 : undefined), "f1", this, (v103 * undefined), JSFuzzer.call((((typeof f1) === "function") ? f1 : undefined), "f1", false, this, v12));
	return this;
}
v90 = (v11--);
v93 = v38;
var v106;
v101 = (((this / v103) == v27) + this);
var loop_var5 = 0;
do
{/* block id: 707 */
	JSFuzzer.print("block 707");
	if ((!((loop_var5++) < 39)))
	{
		break;
	}
	var v107 = v57, v108, v109;
	var v110 = v1;
	function f3(v93, v111, v110, v112, v113, v33, v97, v99, v114, v90, v115, v57, v116, v117, v109, v118)
	{/* block id: 731 */
		JSFuzzer.print("block 731");
		JSFuzzer.call((((typeof f2) === "function") ? f2 : undefined), "f2", v33, v39, null);
	}
	var v119, v120 = v12, v121, v122 = v84, v123, v124, v125 = null;
	var v126, v127;
}
while (v95);
var v128;
if ((v21++))
{/* block id: 770 */
	JSFuzzer.print("block 770");
	var v129 = JSFuzzer.call((((typeof f2) === "function") ? f2 : undefined), "f2", v92, v26, v93);
	var v130, v131, v132, v133 = JSFuzzer.call((((typeof f1) === "function") ? f1 : undefined), "f1", v101, v33, NaN);
	var v134 = JSFuzzer.call((((typeof f3) === "function") ? f3 : undefined), "f3", NaN, 8648, v20, v95, v125, null, v36, v132, v130, v88, v126, v25, 1, v54, v100, v102);
}
else
{/* block id: 813 */
	JSFuzzer.print("block 813");
	v122 = true;
	JSFuzzer.call(function (v126)
		{/* block id: 820 */
			JSFuzzer.print("block 820");
			v91 = v95;
			var loop_var6 = 0;
			while (Infinity)
			{/* block id: 837 */
				JSFuzzer.print("block 837");
				if ((!((loop_var6++) < 22)))
				{
					break;
				}
				var v135, v136 = v126, v137 = null, v138, v139 = this;
				var v140 = v121, v141 = 16177412, v142;
			}
			v37 = v124;
		}, "anonymous f864", v24);
}
if ((v95 - null))
{/* block id: 871 */
	JSFuzzer.print("block 871");
	v120 = v12;
	v109 = JSFuzzer.call((((typeof f1) === "function") ? f1 : undefined), "f1", v98, v91, v35);
}
var v143 = v21, v144, v145 = (v104 | v11), v146 = v11, v147 = v28, v148, v149;
JSFuzzer.print("Execution is over.\n");
/*
 * ------------- Printing All The Program Variables -------------
 */
JSFuzzer.debugVars([["v103", v103], ["v147", v147], ["v104", v104], ["v148", v148], ["v101", v101], ["v145", v145], ["v102", v102], ["v146", v146], ["v90", v90], ["v143", v143], ["v100", v100], ["v144", v144], ["v92", v92], ["v91", v91], ["v94", v94], ["v93", v93], ["v96", v96], ["v95", v95], ["v54", v54], ["v98", v98], ["v97", v97], ["v12", v12], ["v56", v56], ["v11", v11], ["v55", v55], ["v99", v99], ["v57", v57], ["v134", v134], ["v132", v132], ["v133", v133], ["v130", v130], ["v131", v131], ["v21", v21], ["v129", v129], ["v20", v20], ["v23", v23], ["v127", v127], ["v22", v22], ["v128", v128], ["v25", v25], ["v24", v24], ["v27", v27], ["v26", v26], ["v28", v28], ["v125", v125], ["v126", v126], ["v123", v123], ["v124", v124], ["v121", v121], ["v122", v122], ["v120", v120], ["v119", v119], ["v34", v34], ["v33", v33], ["v36", v36], ["v35", v35], ["v38", v38], ["v37", v37], ["v39", v39], ["v110", v110], ["v109", v109], ["v84", v84], ["v107", v107], ["v108", v108], ["v89", v89], ["v149", v149], ["v88", v88], ["v106", v106], ["v1", v1]]);
/*
 * Configuration used:
 * 
 * stmt_call=25
 * stmt_StatementsBlock=1
 * stmt_Break=10
 * literal_string_lambda=0.05
 * stmt_If=20
 * max_jst_depth=40
 * loop_max_iterations_normal_stddev=10
 * call_existing_function_bernoully_p=0.95
 * literal_string_max_length=2048
 * case_num_lambda_exp=0.5
 * case_block_include_default_bernoully_p=0.1
 * stmt_While=40
 * expr_ArrayExpression=10
 * stmt_OutputStatement=10
 * stmt_For=40
 * var_decl_init_val_bernoully_p=0.5
 * expr_ExpressionOp=20
 * func_param_use_existing_var_bernoully_p=0.5
 * stmt_FunctionDefinition=20
 * stmt_Assignment=40
 * stmt_Switch=5
 * factor_depth=0.85
 * func_params_num_lambda_exp=0.3
 * stmt_DoWhile=40
 * stmt_Expression=2
 * var_redeclare_existing_var=0.05
 * array_length_lambda_exp=0.8
 * nested_loops_factor=0.5
 * expr_Identifier=20
 * switch_block_num_lambda_exp=0.85
 * expr_This=2
 * expr_FunctionExpression=10
 * stmt_CompoundAssignment=10
 * loop_max_iterations_normal_exp=30
 * stmt_Continue=10
 * stmt_VarDecleration=40
 * expr_Call=10
 * stmt_Return=10
 * object_keys_length_lambda_exp=0.8
 * literal_number_max_probability=0.01
 * literal_number_lambda=0.3
 * stmts_block_size_lambda=0.15
 * in_switch_identifier_prob=100
 * expr_MemberExpression=10
 * expr_Literal=10
 * return_value_bernoully_p=0.9
 * stmt_ForEach=30
 * var_decl_num_lambda_exp=0.5
 * expr_ObjectExpression=10
 * program_size_lambda=0.02
 */