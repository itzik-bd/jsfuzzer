var $ = (function()
{
	// private
	var callDepth = 0;
	var registeredFunctions = [];
	
	// public
	var api = {};
	
	/*	print function - platform independent
	 *	also adds identation acording to the current stack depth
	 */
	api.print = function(str)
	{
		str = Array(callDepth+1).join("\t") + str;
		typeof console !== 'undefined' ? console.log(str) : print(str);
	};

	/* stringify value based on its type */
	api.stringifyValue = function(value)
	{
		if (typeof value === 'object' || typeof value === 'string') 
			value = JSON.stringify(value);
		else if (typeof value === 'function') 
			value = 'function';
		return value;
	}
	
	/*	Function that print all vars and their value (JSON)
	 *	Recives a single array whose elements are pairs (as array) that contains string and value.
	 *	For example: [["v2",v2],["v7",v7]]
	 */
	api.traceDebugVars = function (varsArray)
	{
		for (var i=0; i<varsArray.length; i++) {
			api.print(varsArray[i][0] + " = " + api.stringifyValue(varsArray[i][1]));
		}
	};
	
	/*	call proxy function - every call to any generated function is pass through this proxy.
	 *	Moreover, it trace the program function calls depth
	 */
	api.call = function ()
	{
		var result;
		var f = arguments[0];
		var f_name = arguments[1];
		var call_id = arguments[2];
		var callStr = f_name + " (call "+call_id+")";
		if (typeof f === 'function') {
			if (isRegisterFunction(f_name)) {
				// print function entrance trace and increase depth
				api.print(">> " + callStr);
				callDepth++;

				// build call params list (ignore first 3)
				var params = new Array(arguments.length-3);
				for (var i=3; i<arguments.length; i++) params[i-3] = arguments[i];

				// execute call
				result = f.apply(f, params);

				// decrease depth and print function exit trace
				callDepth--;
				api.print("<< " + callStr);
			}
			else api.print('-- ' + callStr + ' (undefined during runtime: ' + registeredFunctions.join(", ") + ')');
		}
		else api.print('-- ' + callStr + ' (undefined)');
		return result;
	};
	
	api.regFunc = function(name)
	{
		if (registeredFunctions.indexOf(name) == -1) {
			registeredFunctions.push(name);
		}
	};

	function isRegisterFunction(name)
	{
		return (name.indexOf("anonymous ") == 0 || registeredFunctions.indexOf(name) > -1);
	}

	api.mem = function(x, y)
	{
		if(x == null || x == undefined)
			return undefined;
		return x[y];
	};

	// override toString method of function to make a standard across engines
	Function.prototype.toString = function() { return "function"; };

	return api;
})();

// override JSON.stringify implementation
(function ()
{
	var oldStringifyFunction = JSON.stringify;

	//returns a string representation of an object
	JSON.stringify = function (something)
	{
		var encodeFunction = encodeOther;

		if (typeof something == 'object' && something !== null)
		{
			//we do this to avoid circular object - it will be catched
			try { oldStringifyFunction(obj); }
			catch(e) { return "[circular Object]"; }

			// check if object/array
			encodeFunction = (Array.isArray(something)) ? encodeArray : encodeObject;
		}

		// apply encode on something
		return encodeFunction(something)
	}

	function encodeObject(obj)
	{
		// get object keys and sort them alphabetically
		var objectKeys = Object.keys(obj).sort();

		// compose object json key/values pairs
		var str = "{";
		for (i = 0; i < objectKeys.length; i++) {
			var key = objectKeys[i];
			var value = obj[key];
			str += (i>0?",":"") + oldStringifyFunction(key) + ":" + JSON.stringify(value);
		}
		str += "}";

		return str;
	}

	function encodeArray(arr)
	{
		// compose object json key/values pairs
		var str = "[";
		for (i = 0; i < arr.length; i++) {
			var value = arr[i];
			str += (i>0?",":"") + JSON.stringify(value);
		}
		str += "]";

		return str;
	}

	function encodeOther(value)
	{
		if(typeof value == 'number' && isNaN(value))
			return "null";
		else
			return oldStringifyFunction(value);
	}
})();