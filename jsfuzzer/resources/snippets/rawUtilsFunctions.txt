var JSFuzzer = (function()
{
	// private
	var callDepth = -1;
	var registeredFunctions = [];
	
	// public
	var api = {};
	
	/*	print function - platform independent */
	api.print = function(str)
	{
		typeof console !== 'undefined' ? console.log(str) : print(str);
	};
	
	/*	Function that print all vars and their value (JSON)
	 *	Recives a single array whose elements are pairs (as array) that contains string and value.
	 *	For example: [["v2",v2],["v7",v7]]
	 */
	api.debugVars = function (varsArray)
	{
		for (var i=0; i<varsArray.length; i++)
		{
			var value = varsArray[i][1];
			if (typeof value === 'object') 
				value = JSON.stringify(varsArray[i][1]);
			else if (typeof value === 'function') 
				value = 'function';
			api.print(varsArray[i][0] + " = " + value);
		}
	};
	
	/*	call proxy function - every call to any generated function is pass through this proxy.
	 *	Moreover, it trace the program function calls depth
	 */
	api.call = function ()
	{
		callDepth++;
		var result;
		var f = arguments['0'];
		var f_name = arguments['1'];
		if (typeof f === 'function') {
			if (isRegisterFunction(f_name)) {
				api.traceDebug(f_name);
				var params = [];
				for (key in arguments) if (key != '0' && key != '1') params.push(arguments[key]);
				result = f.apply(f, params);
			}
			else api.traceDebug('call to non-func ' + f_name + ' that is not defined during runtime: ' + registeredFunctions.join(", "));
		}
		else api.traceDebug('call to non-func ' + f_name);
		callDepth--;
		return result;
	};
	
	api.traceDebug = function(str)
	{
		api.print(Array(callDepth+1).join("\t") + str);
	};

	api.regFunc = function(name)
	{
		if (registeredFunctions.indexOf(name) == -1) {
			registeredFunctions.push(name);
		}
	};

	function isRegisterFunction(name)
	{
		return (name.indexOf("anonymous ") == 0 || registeredFunctions.indexOf(name) > -1);
	}

	return api;
})();

// override JSON.stringify implementation
(function ()
{
	var oldStringifyFunction = JSON.stringify;

	//returns a string representation of an object
	JSON.stringify = function (obj)
	{
		//we do this to avoid circular object - it will be catched
		try { oldStringifyFunction(obj); }
		catch(e) { return "[circular Object]"; }
	
		var str = "{";
		var sortable = [];
		for (var key in obj) 
		{
  			if (obj.hasOwnProperty(key)) //make sure p is not a part of the object prototype
				sortable.push([key, obj[key]]);
		}
		
		sortable.sort( function(a,b) { //sort by keys.toString
			if(a[0] < b[0]) return -1;
			if(a[0] == b[0]) return 0;
			return 1;
		});
		
		for (i = 0; i < sortable.length; i++)
		{
			var key = sortable[i][0], value = sortable[i][1];
			if(i > 0)
				str += ",";
				
			str = str + oldStringifyFunction(key) + ":";
			
			if(typeof value == 'object')
				str += oldStringifyFunction(value);
			else if(typeof value == 'number' && isNaN(value))
				str += "null";
			else
				str += oldStringifyFunction(value);
		}
  		str += "}";
  		return str;
	}
})();